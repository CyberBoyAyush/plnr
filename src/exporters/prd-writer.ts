import fs from 'fs/promises';
import path from 'path';
import { Plan } from '../types/index.js';
import { logger } from '../utils/logger.js';

export async function exportPRD(plan: Plan, task: string, projectRoot: string): Promise<string> {
  try {
    const outputDir = path.join(projectRoot, '.cengine');
    await fs.mkdir(outputDir, { recursive: true });

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const filename = `plan-${timestamp}.md`;
    const filePath = path.join(outputDir, filename);

    const content = generatePRDContent(plan, task);
    await fs.writeFile(filePath, content, 'utf-8');

    logger.success(`PRD exported to: ${filePath}`);
    return filePath;
  } catch (error) {
    logger.error('Error exporting PRD:', error);
    throw error;
  }
}

function generatePRDContent(plan: Plan, task: string): string {
  return `# Implementation Plan

**Task**: ${task}
**Generated**: ${new Date().toLocaleString()}

---

## Summary

${plan.summary}

---

## Implementation Steps

${plan.steps.map((step, index) => `
### Step ${index + 1}: ${step.title}

${step.description}

**Files to Modify:**
${step.files_to_modify.length > 0 ? step.files_to_modify.map(f => `- ${f}`).join('\n') : '- None'}

**Files to Create:**
${step.files_to_create.length > 0 ? step.files_to_create.map(f => `- ${f}`).join('\n') : '- None'}

**Code Changes:**
${step.code_changes}
`).join('\n---\n')}

---

## Dependencies to Add

${plan.dependencies_to_add.length > 0
  ? plan.dependencies_to_add.map(dep => `- ${dep}`).join('\n')
  : 'No new dependencies required'}

---

## Risks & Considerations

${plan.risks.length > 0
  ? plan.risks.map(risk => `- ${risk}`).join('\n')
  : 'No significant risks identified'}

---

*Generated by ContextEngine*
`;
}
